(()=>{"use strict";class e{constructor(e=!1){this.main=e;const t=new DOMParser;this.popUpMenue=t.parseFromString('<div class="add-task-menue-cont hidden fixed top-0 w-full h-screen p-8"> <div class="add-task-menue mx-auto max-w-xl relative z-20 bg-slate-100 rounded-lg shadow-lg p-4 font-semibold flex flex-col gap-2"> <h2>Add new task</h2> <div class="flex flex-col xs:flex-row gap-2"> <input type="text" class="add-task-input input w-full"/> <button class="add-task-add-btn btn btn-secondary grow"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"> <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v6m3-3H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"/> </svg> </button> </div> </div> <div class="add-task-menue-bg fixed top-0 left-0 w-full h-screen z-10 backdrop-blur"></div> </div> ',"text/html").body.firstChild,!0===e?document.body.appendChild(this.popUpMenue):document.querySelector(".edit-menues-container").appendChild(this.popUpMenue),this.addTaskDialogLabel=this.popUpMenue.querySelector("h2"),this.addTaskAddBtn=this.popUpMenue.querySelector(".add-task-add-btn"),this.addTaskMenueCont=this.popUpMenue,this.addTaskMenue=this.popUpMenue.querySelector(".add-task-menue"),this.addTaskInput=this.popUpMenue.querySelector("input"),this.addTaskMenueBtn=document.querySelector(".add-task-menue-btn"),!0===e&&this.addTaskMenueBtn.addEventListener("input",(()=>{this.addTaskMenueBtn.checked&&this.open()})),this.addTaskMenueBg=this.popUpMenue.querySelector(".add-task-menue-bg"),this.addTaskMenueBg.addEventListener("click",(()=>{this.close()}))}setupClose(){this.addTaskMenueBtn.addEventListener("click",(()=>{this.addTaskMenueBtn.checked||this.close()}),{once:!0})}open(){this.addTaskMenueBtn.checked=!0,this.setupClose(),this.addTaskMenueCont.classList.remove("hidden"),this.addTaskInput.focus(),this.addTaskMenue.classList.add("animate-open-menue"),this.addTaskMenueBg.classList.add("animate-fade-in"),setTimeout((()=>{this.addTaskMenue.classList.remove("animate-open-menue"),this.addTaskMenueBg.classList.remove("animate-fade-in")}),200)}close(){this.addTaskMenueBtn.checked=!1,this.addTaskMenue.classList.add("animate-close-menue"),this.addTaskMenueBg.classList.add("animate-fade-out"),this.addTaskInput.value="",setTimeout((()=>{this.addTaskMenueCont.classList.add("hidden"),this.addTaskMenue.classList.remove("animate-close-menue"),this.addTaskMenueBg.classList.remove("animate-fade-out")}),200)}}function t(e){this.title=e}function s(e,t){this.dataEntryNumber=t,this.title=e;const s=new DOMParser;this.node=s.parseFromString('<div class="bg-zinc-100 origin-top overflow-hidden p-2 rounded-lg flex justify-start items-center shadow-md gap-2"> <input id="" class="checkbox" type="checkbox"/> <label for="" class="grow"></label> <button class="opacity-100 md:opacity-0 hover:opacity-100 transition-all active:scale-95"> <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6"> <path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125"/> </svg> </button> </div> ',"text/html").body.firstChild,this.node.setAttribute("dataEntryNumber",t),this.checkBox=this.node.querySelector("input"),this.editBtn=this.node.querySelector("button"),this.label=this.node.querySelector("label"),this.label.innerText=e}let a=new class{constructor(){this.toDoListArray=[],this.listContainer=document.querySelector(".list-container")}updateDisplay(t=!1,a=!1){document.querySelector(".edit-menues-container").innerHTML="",this.listContainer.innerHTML="";let n=0;this.toDoListArray.forEach((d=>{let i=new s(d.title,n);console.log(this.toDoListArray.length),n!==this.toDoListArray.length-1||t||a||i.node.classList.add("animate-add-new-item"),n+=1;let o=new e;i.editBtn.addEventListener("click",(()=>{o.addTaskDialogLabel.innerText="Edit item",o.addTaskInput.value=d.title,o.addTaskAddBtn.addEventListener("click",(()=>{this.toDoListArray[i.dataEntryNumber].title=o.addTaskInput.value,i.label.innerText=o.addTaskInput.value,o.close(),setTimeout((()=>{this.updateDisplay(t=!0)}),200)})),o.open()})),i.checkBox.addEventListener("input",(()=>{this.toDoListArray.splice(i.dataEntryNumber,1),i.node.classList.add("animate-remove-item"),setTimeout((()=>{this.updateDisplay(a=!0)}),550)})),this.listContainer.appendChild(i.node)}))}append(e,s){this.toDoListArray.push(new t(e)),this.updateDisplay()}},n=new e(!0);n.addTaskAddBtn.addEventListener("click",(()=>{a.append(n.addTaskInput.value),n.close()}))})();